use cipher::consts::{U1, U16, U4};
use cipher::{
    AlgorithmName, Block, BlockSizeUser, Iv, IvSizeUser, Key, KeyIvInit, KeySizeUser,
    ParBlocksSizeUser, StreamCipherBackend, StreamCipherClosure, StreamCipherCore,
    StreamCipherCoreWrapper,
};

pub use cipher;

pub mod prelude {
    pub use super::Zuc;
    pub use cipher::{KeyIvInit, StreamCipher};
}

pub struct ZucCore {
    s: [u32; 16],
    r: [u32; 2],
}

impl ZucCore {
    fn lfsr_with_init_mode(&mut self, u: u32) {
        let mut sum = [
            (self.s[15] as u64) << 15,
            (self.s[13] as u64) << 17,
            (self.s[10] as u64) << 21,
            (self.s[4] as u64) << 20,
            (self.s[0] as u64) << 8,
            self.s[0] as u64,
            u as u64,
        ]
        .into_iter()
        .sum::<u64>();
        sum = (sum >> 31) + (sum % (1 << 31));
        sum = (sum >> 31) + (sum % (1 << 31));
        for i in 0..15 {
            self.s[i] = self.s[i + 1];
        }
        self.s[15] = sum as u32;
    }

    fn lfsr_with_work_mode(&mut self) {
        self.lfsr_with_init_mode(0);
    }

    const fn bit_reorganization(&self) -> [u32; 4] {
        [
            ((self.s[15] << 1) & 0xffff0000) | self.s[14] & 0xffff,
            self.s[11] << 16 | self.s[9] >> 15,
            self.s[7] << 16 | self.s[5] >> 15,
            self.s[2] << 16 | self.s[0] >> 15,
        ]
    }

    const S0: [u8; 256] = [
        0x3e, 0x72, 0x5b, 0x47, 0xca, 0xe0, 0x00, 0x33, 0x04, 0xd1, 0x54, 0x98, 0x09, 0xb9, 0x6d,
        0xcb, 0x7b, 0x1b, 0xf9, 0x32, 0xaf, 0x9d, 0x6a, 0xa5, 0xb8, 0x2d, 0xfc, 0x1d, 0x08, 0x53,
        0x03, 0x90, 0x4d, 0x4e, 0x84, 0x99, 0xe4, 0xce, 0xd9, 0x91, 0xdd, 0xb6, 0x85, 0x48, 0x8b,
        0x29, 0x6e, 0xac, 0xcd, 0xc1, 0xf8, 0x1e, 0x73, 0x43, 0x69, 0xc6, 0xb5, 0xbd, 0xfd, 0x39,
        0x63, 0x20, 0xd4, 0x38, 0x76, 0x7d, 0xb2, 0xa7, 0xcf, 0xed, 0x57, 0xc5, 0xf3, 0x2c, 0xbb,
        0x14, 0x21, 0x06, 0x55, 0x9b, 0xe3, 0xef, 0x5e, 0x31, 0x4f, 0x7f, 0x5a, 0xa4, 0x0d, 0x82,
        0x51, 0x49, 0x5f, 0xba, 0x58, 0x1c, 0x4a, 0x16, 0xd5, 0x17, 0xa8, 0x92, 0x24, 0x1f, 0x8c,
        0xff, 0xd8, 0xae, 0x2e, 0x01, 0xd3, 0xad, 0x3b, 0x4b, 0xda, 0x46, 0xeb, 0xc9, 0xde, 0x9a,
        0x8f, 0x87, 0xd7, 0x3a, 0x80, 0x6f, 0x2f, 0xc8, 0xb1, 0xb4, 0x37, 0xf7, 0x0a, 0x22, 0x13,
        0x28, 0x7c, 0xcc, 0x3c, 0x89, 0xc7, 0xc3, 0x96, 0x56, 0x07, 0xbf, 0x7e, 0xf0, 0x0b, 0x2b,
        0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xa6, 0x4c, 0x10, 0xfe, 0xbc, 0x26, 0x95, 0x88, 0x8a,
        0xb0, 0xa3, 0xfb, 0xc0, 0x18, 0x94, 0xf2, 0xe1, 0xe5, 0xe9, 0x5d, 0xd0, 0xdc, 0x11, 0x66,
        0x64, 0x5c, 0xec, 0x59, 0x42, 0x75, 0x12, 0xf5, 0x74, 0x9c, 0xaa, 0x23, 0x0e, 0x86, 0xab,
        0xbe, 0x2a, 0x02, 0xe7, 0x67, 0xe6, 0x44, 0xa2, 0x6c, 0xc2, 0x93, 0x9f, 0xf1, 0xf6, 0xfa,
        0x36, 0xd2, 0x50, 0x68, 0x9e, 0x62, 0x71, 0x15, 0x3d, 0xd6, 0x40, 0xc4, 0xe2, 0x0f, 0x8e,
        0x83, 0x77, 0x6b, 0x25, 0x05, 0x3f, 0x0c, 0x30, 0xea, 0x70, 0xb7, 0xa1, 0xe8, 0xa9, 0x65,
        0x8d, 0x27, 0x1a, 0xdb, 0x81, 0xb3, 0xa0, 0xf4, 0x45, 0x7a, 0x19, 0xdf, 0xee, 0x78, 0x34,
        0x60,
    ];

    const S1: [u8; 256] = [
        0x55, 0xc2, 0x63, 0x71, 0x3b, 0xc8, 0x47, 0x86, 0x9f, 0x3c, 0xda, 0x5b, 0x29, 0xaa, 0xfd,
        0x77, 0x8c, 0xc5, 0x94, 0x0c, 0xa6, 0x1a, 0x13, 0x00, 0xe3, 0xa8, 0x16, 0x72, 0x40, 0xf9,
        0xf8, 0x42, 0x44, 0x26, 0x68, 0x96, 0x81, 0xd9, 0x45, 0x3e, 0x10, 0x76, 0xc6, 0xa7, 0x8b,
        0x39, 0x43, 0xe1, 0x3a, 0xb5, 0x56, 0x2a, 0xc0, 0x6d, 0xb3, 0x05, 0x22, 0x66, 0xbf, 0xdc,
        0x0b, 0xfa, 0x62, 0x48, 0xdd, 0x20, 0x11, 0x06, 0x36, 0xc9, 0xc1, 0xcf, 0xf6, 0x27, 0x52,
        0xbb, 0x69, 0xf5, 0xd4, 0x87, 0x7f, 0x84, 0x4c, 0xd2, 0x9c, 0x57, 0xa4, 0xbc, 0x4f, 0x9a,
        0xdf, 0xfe, 0xd6, 0x8d, 0x7a, 0xeb, 0x2b, 0x53, 0xd8, 0x5c, 0xa1, 0x14, 0x17, 0xfb, 0x23,
        0xd5, 0x7d, 0x30, 0x67, 0x73, 0x08, 0x09, 0xee, 0xb7, 0x70, 0x3f, 0x61, 0xb2, 0x19, 0x8e,
        0x4e, 0xe5, 0x4b, 0x93, 0x8f, 0x5d, 0xdb, 0xa9, 0xad, 0xf1, 0xae, 0x2e, 0xcb, 0x0d, 0xfc,
        0xf4, 0x2d, 0x46, 0x6e, 0x1d, 0x97, 0xe8, 0xd1, 0xe9, 0x4d, 0x37, 0xa5, 0x75, 0x5e, 0x83,
        0x9e, 0xab, 0x82, 0x9d, 0xb9, 0x1c, 0xe0, 0xcd, 0x49, 0x89, 0x01, 0xb6, 0xbd, 0x58, 0x24,
        0xa2, 0x5f, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xb8, 0x95, 0xe4, 0xd0, 0x91, 0xc7, 0xce,
        0xed, 0x0f, 0xb4, 0x6f, 0xa0, 0xcc, 0xf0, 0x02, 0x4a, 0x79, 0xc3, 0xde, 0xa3, 0xef, 0xea,
        0x51, 0xe6, 0x6b, 0x18, 0xec, 0x1b, 0x2c, 0x80, 0xf7, 0x74, 0xe7, 0xff, 0x21, 0x5a, 0x6a,
        0x54, 0x1e, 0x41, 0x31, 0x92, 0x35, 0xc4, 0x33, 0x07, 0x0a, 0xba, 0x7e, 0x0e, 0x34, 0x88,
        0xb1, 0x98, 0x7c, 0xf3, 0x3d, 0x60, 0x6c, 0x7b, 0xca, 0xd3, 0x1f, 0x32, 0x65, 0x04, 0x28,
        0x64, 0xbe, 0x85, 0x9b, 0x2f, 0x59, 0x8a, 0xd7, 0xb0, 0x25, 0xac, 0xaf, 0x12, 0x03, 0xe2,
        0xf2,
    ];

    const fn s(x: u32) -> u32 {
        let bytes = x.to_le_bytes();
        let bytes = [
            Self::S1[bytes[0] as usize],
            Self::S0[bytes[1] as usize],
            Self::S1[bytes[2] as usize],
            Self::S0[bytes[3] as usize],
        ];
        u32::from_le_bytes(bytes)
    }

    const fn l1(x: u32) -> u32 {
        x ^ x.rotate_left(2) ^ x.rotate_left(10) ^ x.rotate_left(18) ^ x.rotate_left(24)
    }

    const fn l2(x: u32) -> u32 {
        x ^ x.rotate_left(8) ^ x.rotate_left(14) ^ x.rotate_left(22) ^ x.rotate_left(30)
    }

    fn f(&mut self, x: [u32; 3]) -> u32 {
        let w = (x[0] ^ self.r[0]).wrapping_add(self.r[1]);
        let w1 = self.r[0].wrapping_add(x[1]);
        let w2 = self.r[1] ^ x[2];
        self.r[0] = Self::s(Self::l1(w1 << 16 | w2 >> 16));
        self.r[1] = Self::s(Self::l2(w2 << 16 | w1 >> 16));
        w
    }

    const D: [u32; 16] = [
        0x44D700, 0x26BC00, 0x626B00, 0x135E00, 0x578900, 0x35E200, 0x713500, 0x09AF00, 0x4D7800,
        0x2F1300, 0x6BC400, 0x1AF100, 0x5E2600, 0x3C4D00, 0x789A00, 0x47AC00,
    ];
}

impl AlgorithmName for ZucCore {
    fn write_alg_name(f: &mut core::fmt::Formatter) -> core::fmt::Result {
        write!(f, "ZUC")
    }
}

impl KeySizeUser for ZucCore {
    type KeySize = U16;
}

impl IvSizeUser for ZucCore {
    type IvSize = U16;
}

impl KeyIvInit for ZucCore {
    fn new(key: &Key<Self>, iv: &Iv<Self>) -> Self {
        let mut s = Self::D;
        s.iter_mut().zip(key).zip(iv).for_each(|((s, &k), &i)| {
            *s |= (k as u32) << 23;
            *s |= i as u32;
        });
        let mut zuc = Self { s, r: [0, 0] };
        for _ in 0..32 {
            let x = zuc.bit_reorganization();
            let w = zuc.f([x[0], x[1], x[2]]);
            zuc.lfsr_with_init_mode(w >> 1);
        }
        let x = zuc.bit_reorganization();
        zuc.f([x[0], x[1], x[2]]);
        zuc
    }
}

impl BlockSizeUser for ZucCore {
    type BlockSize = U4;
}

impl ParBlocksSizeUser for ZucCore {
    type ParBlocksSize = U1;
}

impl StreamCipherBackend for ZucCore {
    fn gen_ks_block(&mut self, block: &mut Block<Self>) {
        self.lfsr_with_work_mode();
        let x = self.bit_reorganization();
        let z = self.f([x[0], x[1], x[2]]) ^ x[3];
        block.copy_from_slice(&z.to_be_bytes());
    }
}

impl StreamCipherCore for ZucCore {
    fn remaining_blocks(&self) -> Option<usize> {
        None
    }

    fn process_with_backend(&mut self, f: impl StreamCipherClosure<BlockSize = Self::BlockSize>) {
        f.call(self);
    }
}

pub type Zuc = StreamCipherCoreWrapper<ZucCore>;

#[cfg(test)]
mod tests {
    use super::*;

    // https://www.gsma.com/solutions-and-impact/technologies/security/wp-content/uploads/2019/05/eea3eia3testdatav11.pdf

    struct TestSet {
        key: [u8; 16],
        iv: [u8; 16],
        output: Vec<Option<u32>>,
    }

    impl TestSet {
        fn run(&self) {
            let mut core = ZucCore::new(&self.key.into(), &self.iv.into());
            let mut block = Block::<ZucCore>::default();
            for o in &self.output {
                core.gen_ks_block(&mut block);
                if let Some(o) = o {
                    assert_eq!(block, o.to_be_bytes());
                }
            }
        }
    }

    #[test]
    fn test_set_1() {
        TestSet {
            key: [0; 16],
            iv: [0; 16],
            output: vec![Some(0x27bede74), Some(0x018082da)],
        }
        .run();
    }

    #[test]
    fn test_set_2() {
        TestSet {
            key: [0xff; 16],
            iv: [0xff; 16],
            output: vec![Some(0x0657cfa0), Some(0x7096398b)],
        }
        .run()
    }

    #[test]
    fn test_set_3() {
        TestSet {
            key: [
                0x3d, 0x4c, 0x4b, 0xe9, 0x6a, 0x82, 0xfd, 0xae, 0xb5, 0x8f, 0x64, 0x1d, 0xb1, 0x7b,
                0x45, 0x5b,
            ],
            iv: [
                0x84, 0x31, 0x9a, 0xa8, 0xde, 0x69, 0x15, 0xca, 0x1f, 0x6b, 0xda, 0x6b, 0xfb, 0xd8,
                0xc7, 0x66,
            ],
            output: vec![Some(0x14f1c272), Some(0x3279c419)],
        }
        .run()
    }

    #[test]
    fn test_set_4() {
        let mut output = vec![None; 2000];
        output[0] = Some(0xed4400e7);
        output[1] = Some(0x0633e5c5);
        output[1999] = Some(0x7a574cdb);
        TestSet {
            key: [
                0x4d, 0x32, 0x0b, 0xfa, 0xd4, 0xc2, 0x85, 0xbf, 0xd6, 0xb8, 0xbd, 0x00, 0xf3, 0x9d,
                0x8b, 0x41,
            ],
            iv: [
                0x52, 0x95, 0x9d, 0xab, 0xa0, 0xbf, 0x17, 0x6e, 0xce, 0x2d, 0xc3, 0x15, 0x04, 0x9e,
                0xb5, 0x74,
            ],
            output,
        }
        .run()
    }
}
